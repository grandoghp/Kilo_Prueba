// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  cartItems CartItem[]
  accounts  Account[]
  sessions  Session[]
  reviews   Review[]
}

model Game {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  genre       String
  platform    String
  imageUrl    String
  rating      Float?
  releaseDate DateTime?
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Nuevos campos para detalles
  videoUrl    String?
  specs       String?  // JSON string con specs t√©cnicas
  developer   String?
  publisher   String?
  orderItems  OrderItem[]
  cartItems   CartItem[]
  reviews     Review[]
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  total     Float
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id       String
  orderId  String
  gameId   String
  quantity Int
  price    Float
  order    Order @relation(fields: [orderId], references: [id])
  game     Game  @relation(fields: [gameId], references: [id])
  
  @@id([id, orderId])
}

model CartItem {
  id       String @id @default(cuid())
  userId   String
  gameId   String
  quantity Int
  user     User @relation(fields: [userId], references: [id])
  game     Game @relation(fields: [gameId], references: [id])

  @@unique([userId, gameId])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  gameId    String
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  game      Game     @relation(fields: [gameId], references: [id])

  @@unique([userId, gameId])
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}